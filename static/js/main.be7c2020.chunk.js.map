{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","number","imgSrc","concat","props","id","slice","react_default","a","createElement","className","name","src","alt","type","base_experience","Component","Pokedex","title","isWinner","exp","pokemon","map","p","src_Pokecard_0","Pokegame","hand1","hand2","toConsumableArray","length","randIndx","Math","random","randPokemon","splice","push","exp1","reduce","exp2","src_Pokedex_0","defaultProps","App","src_Pokegame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be7c2020.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Pokecard.css'\n// const POKE_API=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\"\nconst POKE_API=\"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\"\nlet padToThree = (number) => (number <= 999 ? `00${number}`.slice(-3) : number);\nexport class Pokecard extends Component {\n    render() {\n        let imgSrc=` ${POKE_API}${padToThree(this.props.id)}.png`;\n    return (\n      <div className=\"Pokecard\">\n        <h1 className=\"Pokecard-title\">{this.props.name}</h1>\n        <img src={imgSrc} alt={this.props.name}/>\n        <div className=\"Pokecard-data\">Type:{this.props.type}</div>\n        <div className=\"Pokecard-data\">Experience:{this.props.base_experience}</div>\n      </div>\n    )\n  }\n}\n\nexport default Pokecard\n","import React, { Component } from 'react'\nimport PokeCard from './Pokecard'\nimport './Pokedex.css'\nexport class Pokedex extends Component {\n \n  render() {\n       \n    let title;\n    if (this.props.isWinner) {\n        title = <h1 className=\"Pokedex-winner\">Winning Hand</h1>;\n    } else {\n        title = <h1 className=\"Pokedex-loser\">Losing Hand</h1>;\n    }\n    return (\n      <div className=\"Pokedex\">\n        <p>Total experience: {this.props.exp}</p>\n        {title}\n        <div className=\"Pokedex-cards\">\n        {this.props.pokemon.map((p) => \n            (\n                <PokeCard \n                id={p.id} \n                name={p.name} \n                type={p.type} \n                base_experience={p.base_experience}\n            />\n            )\n        )\n        }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Pokedex\n","import React, { Component } from 'react'\nimport Pokedex from './Pokedex'\nexport class Pokegame extends Component {\n    static defaultProps={\n        pokemon:[\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\n          ]\n    }\n  render() {\n      let hand1=[];\n      let hand2=[...this.props.pokemon];\n    while(hand1.length!==hand2.length){\n        let randIndx=Math.random()*hand2.length;\n        let randPokemon=hand2.splice(randIndx,1)[0]\n        hand1.push(randPokemon)\n    }\n    let exp1=hand1.reduce((exp,pokemon)=>exp+pokemon.base_experience,0)\n    let exp2=hand2.reduce((exp,pokemon)=>exp+pokemon.base_experience,0)\n    return (\n      <div>\n       <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1>exp2}/>\n       <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2>exp1}/>\n       \n      </div>\n    )\n  }\n}\n\nexport default Pokegame\n","import React from 'react';\nimport './App.css';\nimport Pokegame from './Pokegame'\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Pokegame/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}